{
    "user": {
        "findByEmail": "SELECT * FROM tb_user WHERE email = ?",
        "findById": "SELECT * FROM tb_user WHERE id = ?",
        "insert": "INSERT INTO tb_user (`email`, `pw`, `name`, `role`) VALUES (?, ?, ?, ?)",
        "updatePw": "UPDATE tb_user SET `pw`=? WHERE `email` = ?"
    },
    "tutee": {
        "insert": "INSERT INTO tb_tutee (`id`, `google_id`) VALUES (?, ?)",
        "findById": "SELECT * FROM tb_tutee WHERE id = ?"
    },
    "tutor": {
        "insert": "INSERT INTO tb_tutor(`id`, `subject`) VALUES (?, ?)",
        "select": "SELECT  t.id, t.introduce, t.career, t.service_price, t.status, t.subject, t.answer, u.name, COUNT(r.id) AS reviewCount, truncate(AVG(r.score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_user AS u ON t.id = u.id LEFT JOIN tb_review AS r ON t.id = r.tutor_id WHERE t.id = ? GROUP BY t.id, t.introduce, t.career, t.service_price, t.status, t.subject, t.answer, u.name",
        "selectInfo": "SELECT t.detailed_description, t.experience FROM tb_tutor AS t LEFT JOIN tb_user AS u ON t.id = u.id WHERE t.id = ?"
    },
    "freeBoard": {
        "insert": "INSERT INTO tb_free_board (`user_id`, `title`, `content`, `content_json`) VALUES (?, ?, ?, ?)",
        "update": "UPDATE tb_free_board SET `title` = ?, `content` = ?, updated_at = NOW() WHERE id = ? AND user_id = ?",
        "updateViews": "UPDATE tb_free_board SET `views` = `views` + 1 WHERE id = ?",
        "delete": "DELETE FROM tb_free_board WHERE id = ? AND user_id = ?",
        "select": "SELECT f.id, f.user_id, f.title, f.content, f.created_at, f.views , u.name , count(DISTINCT l.user_id) AS like_count, count(DISTINCT c.id) AS comment_count FROM tb_free_board AS f LEFT JOIN tb_user AS u ON f.user_id = u.id LEFT JOIN tb_free_board_comments AS c ON f.id = c.free_board_id LEFT JOIN tb_like AS l ON f.id = l.free_board_id WHERE f.id = ? GROUP BY f.id, f.title, f.content, f.created_at, f.views, u.name",
        "selectAll": "SELECT f.id, f.title, f.content, f.created_at, f.views , u.name , count(DISTINCT l.user_id) AS like_count, count(DISTINCT c.id) AS comment_count  FROM tb_free_board AS f LEFT JOIN tb_user AS u ON f.user_id = u.id LEFT JOIN tb_free_board_comments AS c ON f.id = c.free_board_id LEFT JOIN tb_like AS l ON f.id = l.free_board_id GROUP BY f.id, f.title, f.content, f.created_at, f.views, u.name ORDER BY f.created_at DESC LIMIT ?, ?",
        "selectSearch": "SELECT f.id, f.title, f.created_at, f.views , u.name , count(DISTINCT l.user_id) AS like_count, count(DISTINCT c.id) AS comment_count FROM tb_free_board AS f LEFT JOIN tb_user AS u ON f.user_id = u.id LEFT JOIN tb_free_board_comments AS c ON f.id = c.free_board_id LEFT JOIN tb_like AS l ON f.id = l.free_board_id WHERE f.title LIKE ? GROUP BY f.id, f.title, f.content, f.created_at, f.views, u.name ORDER BY f.created_at DESC LIMIT ?, ?"
    },
    "freeBoardComments": {
        "insert": "INSERT INTO tb_free_board_comments (`user_id`, `free_board_id`, `content`) VALUES(?, ?, ?)",
        "update": "UPDATE tb_free_board_comments SET `content` = ? WHERE id = ? AND free_board_id = ? AND user_id = ?",
        "delete": "DELETE FROM tb_free_board_comments WHERE id = ? AND free_board_id = ? AND user_id = ?",
        "select": "SELECT f.content, f.created_at, f.user_id, u.name, u.role, count(l.user_id) AS like_count FROM tb_free_board_comments AS f LEFT JOIN tb_user AS u ON f.user_id = u.id LEFT JOIN tb_like AS l ON f.id = l.free_board_comments_id WHERE f.id = ? AND f.free_board_id = ? GROUP BY f.content, f.created_at, f.user_id, u.name, u.role",
        "selectAll": "SELECT f.content, f.created_at, f.user_id, u.name, u.role, count(l.user_id) AS like_count FROM tb_free_board_comments AS f LEFT JOIN tb_user AS u ON f.user_id = u.id LEFT JOIN tb_like AS l ON f.id = l.free_board_comments_id WHERE f.free_board_id = ? GROUP BY f.content, f.created_at, f.user_id, u.name, u.role LIMIT ?, ?"
    },
    "questionBoard": {
        "insert": "INSERT INTO tb_question_board (`user_id`, `subject`, `title`, `content`) VALUES (?, ?, ?, ?)",
        "select": "SELECT q.*, u.name FROM tb_question_board AS q LEFT JOIN tb_user AS u ON q.user_id = u.id WHERE q.id = ? AND q.subject = ?",
        "update": "UPDATE tb_question_board SET `title` = ?, `content` = ?, updated_at = NOW() WHERE id = ? AND subject = ? AND user_id = ?",
        "updateViews": "UPDATE tb_question_board SET `views` = `views` + 1 WHERE id = ? AND subject = ?",
        "delete": "DELETE FROM tb_question_board WHERE id = ? AND subject = ? AND user_id = ?",
        "selectAll": "SELECT q.id , q.user_id, q.subject, q.title, q.created_at, q.views, q.status, u.name FROM tb_question_board AS q LEFT JOIN tb_user AS u ON q.user_id = u.id WHERE q.subject = ? ORDER BY q.created_at DESC LIMIT ?, ?",
        "selectSearch": "SELECT q.id , q.user_id, q.subject, q.title, q.created_at, q.views, q.status, u.name FROM tb_question_board AS q LEFT JOIN tb_user AS u ON q.user_id = u.id WHERE q.subject = ? AND q.title LIKE ? ORDER BY q.created_at DESC LIMIT ?, ?"
    },
    "like": {
        "insert": "INSERT INTO tb_like(`user_id`, `free_board_id`, `free_board_comments_id`) VALUES (?, ?, ?)",
        "selectFreeBoard": "SELECT * FROM tb_like WHERE free_board_id = ? AND user_id = ?;",
        "deleteFreeBoard": "DELETE FROM tb_like WHERE user_id = ? AND free_board_id = ?",
        "selectFreeBoardComments": "SELECT * FROM tb_like WHERE user_id = ? AND free_board_comments_id = ?",
        "deleteFreeBoardComments": "DELETE FROM tb_like WHERE user_id = ? AND free_board_comments_id = ?"
    },
    "tutorBoard": {
        "selectAll": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS avgScore FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY RAND() LIMIT ?, ?",
        "selectAllSearch" : "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id WHERE t.introduce LIKE ? GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY t.id ASC LIMIT ?, ?",
        "selectSortReviewCount": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY reviewCount DESC LIMIT ?, ?",
        "selectSortReviewCountSearch": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id WHERE t.introduce LIKE ? GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY reviewCount DESC LIMIT ?, ?",
        "selectSortReviewAvg": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY reviewAvg DESC LIMIT ?, ?",
        "selectSortReviewAvgSearch": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id WHERE t.introduce LIKE ? GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY reviewAvg DESC LIMIT ?, ?",
        "selectSortAnswerCount": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY t.answer DESC LIMIT ?, ?",
        "selectSortAnswerCountSearch": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id WHERE t.introduce LIKE ? GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY t.answer DESC LIMIT ?, ?",
        "subject": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id WHERE json_contains(t.subject,?) GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY RAND() LIMIT ?, ?",
        "subjectSearch": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id WHERE json_contains(t.subject, ?) AND t.introduce LIKE ? GROUP BY t.id, t.introduce, t.career, t.answer, u.name LIMIT ?, ?",
        "subjectReviewCount": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id WHERE json_contains(t.subject, ?) GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY reviewCount LIMIT ?, ?",
        "subjectReviewCountSearch": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id WHERE json_contains(t.subject, ?) AND t.introduce LIKE ? GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY reviewCount LIMIT ?, ?",
        "subjectReviewAvg": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id WHERE json_contains(t.subject, ?) GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY reviewAvg LIMIT ?, ?",
        "subjectReviewAvgSearch": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id WHERE json_contains(t.subject, ?) AND t.introduce LIKE ? GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY reviewAvg LIMIT ?, ?",
        "subjectAnswerCount": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id WHERE json_contains(t.subject, ?) GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY t.answer LIMIT ?, ?",
        "subjectAnswerCountSearch": "SELECT t.id, t.introduce, t.career, t.answer, u.name, COUNT(r.id) AS reviewCount, TRUNCATE(AVG(score),1) AS reviewAvg FROM tb_tutor AS t LEFT JOIN tb_review AS r ON t.id = r.tutor_id LEFT JOIN tb_user AS u ON t.id = u.id WHERE json_contains(t.subject, ?) AND t.introduce LIKE ? GROUP BY t.id, t.introduce, t.career, t.answer, u.name ORDER BY t.answer LIMIT ?, ?"
    },
    "favorite": {
        "select": "SELECT * FROM tb_favorite WHERE user_id = ? AND tutor_id = ?",
        "insert": "INSERT INTO tb_favorite (`user_id`, `tutor_id`) VALUES (?, ?)",
        "delete": "DELETE FROM tb_favorite WHERE user_id = ? AND tutor_id = ?"
    },
    "review": {
        "selectAll": "SELECT r.id, r.score, r.content, r.created_at, u.name FROM tb_review AS r LEFT JOIN tb_user AS u ON r.tutee_id = u.id WHERE r.tutor_id = ? ORDER BY r.created_at DESC LIMIT ?, ?",
        "selectLowScore": "SELECT r.id, r.score, r.content, r.created_at, u.name FROM tb_review AS r LEFT JOIN tb_user AS u ON r.tutee_id = u.id WHERE r.tutor_id = ? ORDER BY r.score ASC, r.created_at DESC LIMIT ?, ?",
        "selectHighScore": "SELECT r.id, r.score, r.content, r.created_at, u.name FROM tb_review AS r LEFT JOIN tb_user AS u ON r.tutee_id = u.id WHERE r.tutor_id = ? ORDER BY r.score DESC, r.created_at DESC LIMIT ?, ?",
        "avgCount": "SELECT COUNT(*) AS allCount, truncate(AVG(score),1) AS avg FROM tb_review AS r WHERE tutor_id = ?"
    }
}